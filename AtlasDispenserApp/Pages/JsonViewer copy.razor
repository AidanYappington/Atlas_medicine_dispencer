@page "/jsonviewer"
@using System.Text.Json
@using System.IO
@inject AtlasDispenserApp.Data.AppDbContext DbContext
@using AtlasDispenserApp.Models

<h1>JSON Bestand Viewer</h1>

<!-- File upload input and clear button -->
<div class="row mb-3">
    <div class="col-md-6">
        <InputFile OnChange="@LoadFile" class="form-control" />
    </div>
    <div class="col-md-2">
        <button class="btn btn-primary" @onclick="ClearJson">Wissen</button>
    </div>
</div>

<!-- Display error message if something went wrong -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

<!-- Display formatted JSON content -->
@if (!string.IsNullOrEmpty(jsonContent))
{
    <div class="card">
        <div class="card-header">
            <h4>JSON Inhoud</h4>
        </div>
        <div class="card-body">
            <pre class="json-content">@formattedJson</pre>
        </div>
    </div>
}

<!-- Display success message after saving -->
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success mt-3">
        @successMessage
    </div>
}

@code {
    private string jsonContent = string.Empty;
    private string formattedJson = string.Empty;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    // Triggered when a file is uploaded
    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        try
        {
            errorMessage = string.Empty;
            successMessage = string.Empty;

            var file = e.File;

            // Check if the uploaded file is a JSON file
            if (file.ContentType != "application/json" && !file.Name.EndsWith(".json"))
            {
                errorMessage = "Alleen JSON bestanden worden ondersteund.";
                return;
            }

            // Read file content (max 5MB)
            using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
            using var reader = new StreamReader(stream);
            jsonContent = await reader.ReadToEndAsync();

            // Try formatting the JSON with indentation
            try
            {
                using var document = JsonDocument.Parse(jsonContent);
                formattedJson = JsonSerializer.Serialize(document, new JsonSerializerOptions
                {
                    WriteIndented = true
                });
            }
            catch
            {
                // Fallback to raw content if formatting fails
                formattedJson = jsonContent;
            }

            // Deserialize JSON into MedicineFile model
            var medicineFile = JsonSerializer.Deserialize<MedicineFile>(jsonContent, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            // Check if required fields are present
            if (medicineFile == null)
            {
                errorMessage = "JSON bevat geen geldige medicijn gegevens.";
                return;
            }

            if (string.IsNullOrWhiteSpace(medicineFile.Name) ||
                string.IsNullOrWhiteSpace(medicineFile.Description) ||
                medicineFile.AmountPerDose <= 0 ||
                medicineFile.TotalAmount <= 0 ||
                medicineFile.IntervalHours <= 0)
            {
                errorMessage = "Verkeerde of ontbrekende velden in JSON.";
                return;
            }

            // Save the valid JSON content and parsed data to the database
            var medicineFileToSave = new AtlasDispenserApp.Models.MedicineFile
            {
                FileName = file.Name,
                Content = jsonContent,
                UploadedAt = DateTime.UtcNow,
                Name = medicineFile.Name,
                Description = medicineFile.Description,
                AmountPerDose = medicineFile.AmountPerDose,
                TotalAmount = medicineFile.TotalAmount,
                IntervalHours = medicineFile.IntervalHours
            };

            DbContext.MedicineFiles.Add(medicineFileToSave);
            await DbContext.SaveChangesAsync();

            successMessage = "JSON bestand succesvol opgeslagen in de database.";
        }
        catch (Exception ex)
        {
            // Handle unexpected exceptions
            errorMessage = $"Fout bij het verwerken van het bestand: {ex.Message}";
            jsonContent = string.Empty;
            formattedJson = string.Empty;
        }
    }

    // Clears current JSON content and messages
    private void ClearJson()
    {
        jsonContent = string.Empty;
        formattedJson = string.Empty;
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }
}

<style>
    .json-content {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 5px;
        overflow-x: auto;
        white-space: pre-wrap;
        font-family: monospace;
    }
</style>
