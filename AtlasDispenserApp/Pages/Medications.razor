@* @page "/medications"
@rendermode InteractiveServer
@using System.Threading
@using BlazorApp1.Services
@using BlazorApp1.Data
@inject MedicationService MedicationService
@inject IJSRuntime JS
@implements IDisposable

<h3>Medication List with Timer</h3>

<div class="card mb-4">
    <div class="card-header bg-info text-white">
        <h3 class="mb-0">Current Time</h3>
    </div>
    <div class="card-body text-center">
        <div class="display-1 fw-bold">@currentTime.ToString("HH:mm:ss")</div>
        <div class="fs-4">@currentTime.ToString("dddd, MMMM dd, yyyy")</div>
    </div>
</div>

@if (ErrorMessage != null)
{
    <p class="text-danger">@ErrorMessage</p>
}
else if (medicationList == null)
{
    <p>Loading...</p>
}
else if (medicationList.Count == 0)
{
    <p>No medications found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Dosage</th>
                <th>Time</th>
                <th>Countdown</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var med in medicationList)
            {
                <tr class="@(IsOverdue(med.Time) ? "table-danger" : "")">
                    <td>@med.Name</td>
                    <td>@med.Dosage</td>
                    <td>@med.Time.ToString("yyyy-MM-dd HH:mm")</td>
                    <td>@GetTimeRemaining(med.Time)</td>
                    <td>@(IsOverdue(med.Time) ? "Overdue!" : "Upcoming")</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (NextMedication != null)
{
    <div class="card mt-4">
        <div class="card-header bg-primary text-white">
            <h3 class="mb-0">Next Medication Reminder</h3>
        </div>
        <div class="card-body">
            <p>Next Medication: <strong>@NextMedication.Name</strong> at <strong>@NextMedication.Time.ToString("hh:mm tt")</strong></p>
            <p>Time Left: <strong>@GetTimeRemaining(NextMedication.Time)</strong></p>
            @if (IsOverdue(NextMedication.Time))
            {
                <div class="alert alert-danger">
                    It's time to take your medication!
                </div>
            }
        </div>
    </div>
}

@code {
    private List<Medication>? medicationList;
    private string? ErrorMessage;
    private Medication? NextMedication;
    private Timer? timer;
    private bool disposed = false;
    private DateTime currentTime = DateTime.Now;
    // Synchronization context for UI updates
    private SynchronizationContext? uiContext;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Store the current synchronization context
            uiContext = SynchronizationContext.Current;
            
            medicationList = await MedicationService.GetMedicationsAsync();
            if (medicationList == null || medicationList.Count == 0)
            {
                ErrorMessage = "No data returned from database.";
                return;
            }

            // Find the next medication
            UpdateNextMedication();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading medications: {ex.Message}";
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // Start timer only on first render
        if (firstRender)
        {
            // Start the countdown timer after first render
            StartCountdown();
        }
    }

    private void UpdateNextMedication()
    {
        if (medicationList == null || medicationList.Count == 0)
            return;

        // Update currentTime for consistent comparisons
        currentTime = DateTime.Now;
        
        NextMedication = medicationList.Where(m => m.Time > currentTime)
                                       .OrderBy(m => m.Time)
                                       .FirstOrDefault();

        if (NextMedication == null)
        {
            // If no upcoming medications, use the most recent one as reference
            NextMedication = medicationList.OrderByDescending(m => m.Time).FirstOrDefault();
        }
    }

    private void StartCountdown()
    {
        // Use the stored SynchronizationContext
        // Create a timer that ticks every second
        timer = new Timer(TimerCallback, null, 0, 1000); // Runs immediately, then every 1 second
    }

    private void TimerCallback(object? state)
    {
        if (disposed) return;

        try
        {
            // Update current time
            currentTime = DateTime.Now;
            
            // Update the next medication (in case time has passed and we need a new one)
            UpdateNextMedication();

            // Check if any medication is due and show alert
            CheckForDueMedications();

            // Post the UI update to the appropriate SynchronizationContext
            uiContext?.Post(_ => 
            {
                try
                {
                    if (!disposed)
                    {
                        StateHasChanged();
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error in StateHasChanged: {ex.Message}");
                }
            }, null);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in timer callback: {ex.Message}");
        }
    }

    private void CheckForDueMedications()
    {
        if (medicationList == null) return;

        foreach (var med in medicationList)
        {
            var timeUntilDue = med.Time - currentTime;
            
            // If medication just became due (within the last second)
            if (timeUntilDue.TotalSeconds <= 0 && timeUntilDue.TotalSeconds > -1)
            {
                _ = ShowAlert($"Time to take {med.Name}!");
            }
        }
    }

    private string GetTimeRemaining(DateTime medicationTime)
    {
        var remainingTime = medicationTime - currentTime;
        
        if (remainingTime.TotalSeconds <= 0)
            return "Due now!";
            
        if (remainingTime.TotalDays >= 1)
            return $"{Math.Floor(remainingTime.TotalDays):0} days {remainingTime.Hours:00}:{remainingTime.Minutes:00}:{remainingTime.Seconds:00}";
            
        return $"{remainingTime.Hours:00}:{remainingTime.Minutes:00}:{remainingTime.Seconds:00}";
    }

    private bool IsOverdue(DateTime medicationTime)
    {
        return medicationTime <= currentTime;
    }

    private async Task ShowAlert(string message)
    {
        uiContext?.Post(async _ =>
        {
            try 
            {
                if (!disposed)
                {
                    // Small delay before showing alert to prevent multiple alerts at once
                    await Task.Delay(500);
                    await JS.InvokeVoidAsync("alert", message);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error showing alert: {ex.Message}");
            }
        }, null);
    }

    public void Dispose()
    {
        disposed = true;
        timer?.Dispose();
        timer = null;
    }
} *@