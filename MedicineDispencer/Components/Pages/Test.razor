@page "/Test"
@using System
@using System.Device.Gpio
@using System.Threading.Tasks
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="container">
    <div class="header mb-4">
        <h1 class="text-center p-3 bg-primary text-white rounded">GPIO Tester</h1>
    </div>

    <div class="card mb-4">
        <div class="card-header bg-primary text-white">
            <h3 class="mb-0">GPIO Pin Controle</h3>
        </div>
        <div class="card-body">
            <div class="mb-4">
                <h4>Pin 14 (Compartiment 1)</h4>
                <div class="d-flex mt-2">
                    <button class="btn @(pin14State ? "btn-danger" : "btn-success") me-2" @onclick="TogglePin14">
                        @(pin14State ? "Sluiten" : "Openen")
                    </button>
                    <div class="status-indicator @(pin14State ? "bg-success" : "bg-secondary")"></div>
                    <span class="ms-2">Status: @(pin14State ? "AAN" : "UIT")</span>
                </div>
            </div>

            <div class="mb-4">
                <h4>Pin 26 (LED)</h4>
                <div class="d-flex mt-2">
                    <button class="btn @(ledBlinkActive ? "btn-danger" : "btn-success") me-2" @onclick="ToggleLedBlink">
                        @(ledBlinkActive ? "Stop Knipperen" : "Start Knipperen")
                    </button>
                    <div class="status-indicator @(ledState ? "bg-warning" : "bg-secondary")"></div>
                    <span class="ms-2">Status: @(ledBlinkActive ? "KNIPPEREND" : "UIT")</span>
                </div>
            </div>

            <div class="mb-4">
                <h4>Alle Compartiment Pins</h4>
                @foreach (var pin in compartmentPins)
                {
                    var pinNumber = pin.Value;
                    var compartmentNumber = pin.Key + 1;
                    var isActive = pinStates.ContainsKey(pinNumber) && pinStates[pinNumber];

                    <div class="d-flex mt-2 align-items-center">
                        <button class="btn @(isActive ? "btn-danger" : "btn-success") me-2" @onclick="() => TogglePin(pinNumber)">
                            @(isActive ? "Sluiten" : "Openen") Compartiment @compartmentNumber (Pin @pinNumber)
                        </button>
                        <div class="status-indicator @(isActive ? "bg-success" : "bg-secondary")"></div>
                    </div>
                }
            </div>

            <div class="mb-4">
                <h4>Test Custom Pin</h4>
                <div class="input-group mb-2">
                    <input type="number" class="form-control" @bind="customPinNumber" min="0" max="40" placeholder="Voer pin nummer in" />
                    <button class="btn btn-primary" @onclick="ToggleCustomPin">
                        Schakel Pin @customPinNumber
                    </button>
                </div>
                @if (customPinActive)
                {
                    <div class="d-flex mt-2 align-items-center">
                        <div class="status-indicator bg-success"></div>
                        <span class="ms-2">Pin @customPinNumber is AAN</span>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-header bg-primary text-white">
            <h3 class="mb-0">Log</h3>
        </div>
        <div class="card-body">
            <div class="log-container">
                @foreach (var log in logMessages)
                {
                    <div class="log-entry">
                        <span class="log-time">@log.Time.ToString("HH:mm:ss.fff")</span>
                        <span class="log-message">@log.Message</span>
                    </div>
                }
            </div>
            <button class="btn btn-secondary mt-3" @onclick="ClearLog">Wis Log</button>
        </div>
    </div>
</div>

<style>
    .status-indicator {
        width: 20px;
        height: 20px;
        border-radius: 50%;
    }

    .log-container {
        max-height: 300px;
        overflow-y: auto;
        background-color: #f8f9fa;
        padding: 10px;
        border-radius: 4px;
        font-family: monospace;
    }

    .log-entry {
        margin-bottom: 5px;
        border-bottom: 1px solid #e9ecef;
        padding-bottom: 5px;
    }

    .log-time {
        color: #6c757d;
        margin-right: 10px;
    }
</style>

@code {
    // GPIO Controller
    private GpioController? gpio;

    // Pin nummers
    private const int LED_PIN = 26;
    private Dictionary<int, int> compartmentPins = new Dictionary<int, int>
    {
        { 0, 14 },  // Compartiment 1 -> GPIO 14
        { 1, 6 },   // Compartiment 2 -> GPIO 6
        { 2, 13 },  // Compartiment 3 -> GPIO 13
        { 3, 19 }   // Compartiment 4 -> GPIO 19
    };

    // Pin staten
    private bool pin14State = false;
    private bool ledState = false;
    private bool ledBlinkActive = false;
    private Dictionary<int, bool> pinStates = new Dictionary<int, bool>();
    
    // Custom pin
    private int customPinNumber = 0;
    private bool customPinActive = false;

    // Logging
    private List<(DateTime Time, string Message)> logMessages = new List<(DateTime, string)>();

    // Timer voor LED knipperen
    private System.Threading.Timer? ledBlinkTimer;

    protected override void OnInitialized()
    {
        AddLogMessage("GPIO Tester geïnitialiseerd");
        InitializeGpio();
    }

    private void InitializeGpio()
    {
        try
        {
            gpio = new GpioController();
            
            // Initialiseer LED pin
            gpio.OpenPin(LED_PIN, PinMode.Output);
            gpio.Write(LED_PIN, PinValue.Low);
            AddLogMessage($"LED pin {LED_PIN} geïnitialiseerd");
            
            // Initialiseer compartiment pins
            foreach (var kvp in compartmentPins)
            {
                int index = kvp.Key;
                int pin = kvp.Value;
                
                gpio.OpenPin(pin, PinMode.Output);
                gpio.Write(pin, PinValue.Low);
                pinStates[pin] = false;
                AddLogMessage($"Compartiment {index + 1} pin {pin} geïnitialiseerd");
            }

            AddLogMessage("GPIO initialisatie succesvol");
        }
        catch (Exception ex)
        {
            AddLogMessage($"GPIO initialisatie mislukt: {ex.Message}");
        }
    }

    private void TogglePin14()
    {
        try
        {
            if (gpio != null && gpio.IsPinOpen(14))
            {
                pin14State = !pin14State;
                gpio.Write(14, pin14State ? PinValue.High : PinValue.Low);
                AddLogMessage($"Pin 14 (Compartiment 1) geschakeld naar: {(pin14State ? "AAN" : "UIT")}");
            }
            else
            {
                AddLogMessage("Kan pin 14 niet schakelen: pin is niet open");
            }
        }
        catch (Exception ex)
        {
            AddLogMessage($"Fout bij schakelen pin 14: {ex.Message}");
        }
    }

    private void ToggleLedBlink()
    {
        try
        {
            ledBlinkActive = !ledBlinkActive;
            
            if (ledBlinkActive)
            {
                // Start LED knipperen
                ledBlinkTimer = new System.Threading.Timer(LedBlinkCallback, null, 0, 500);
                AddLogMessage($"LED knipperen gestart op pin {LED_PIN}");
            }
            else
            {
                // Stop LED knipperen
                ledBlinkTimer?.Dispose();
                ledBlinkTimer = null;
                
                if (gpio != null && gpio.IsPinOpen(LED_PIN))
                {
                    gpio.Write(LED_PIN, PinValue.Low);
                    ledState = false;
                }
                
                AddLogMessage($"LED knipperen gestopt op pin {LED_PIN}");
            }
        }
        catch (Exception ex)
        {
            AddLogMessage($"Fout bij LED knipperen: {ex.Message}");
        }
    }

    private void LedBlinkCallback(object? state)
    {
        try
        {
            if (gpio != null && gpio.IsPinOpen(LED_PIN))
            {
                ledState = !ledState;
                gpio.Write(LED_PIN, ledState ? PinValue.High : PinValue.Low);
                
                InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            // Kan niet direct loggen in Timer callback, moet via InvokeAsync
            InvokeAsync(() => AddLogMessage($"Fout in LED knipperen: {ex.Message}"));
        }
    }

    private void TogglePin(int pinNumber)
    {
        try
        {
            if (gpio != null && gpio.IsPinOpen(pinNumber))
            {
                bool newState = !pinStates.GetValueOrDefault(pinNumber, false);
                pinStates[pinNumber] = newState;
                
                gpio.Write(pinNumber, newState ? PinValue.High : PinValue.Low);
                
                // Vind compartiment nummer (index + 1)
                int compartmentNumber = -1;
                foreach (var kvp in compartmentPins)
                {
                    if (kvp.Value == pinNumber)
                    {
                        compartmentNumber = kvp.Key + 1;
                        break;
                    }
                }
                
                if (compartmentNumber > 0)
                {
                    AddLogMessage($"Compartiment {compartmentNumber} (Pin {pinNumber}) geschakeld naar: {(newState ? "AAN" : "UIT")}");
                }
                else
                {
                    AddLogMessage($"Pin {pinNumber} geschakeld naar: {(newState ? "AAN" : "UIT")}");
                }
            }
            else
            {
                AddLogMessage($"Kan pin {pinNumber} niet schakelen: pin is niet open");
            }
        }
        catch (Exception ex)
        {
            AddLogMessage($"Fout bij schakelen pin {pinNumber}: {ex.Message}");
        }
    }

    private void ToggleCustomPin()
    {
        try
        {
            if (customPinNumber < 0 || customPinNumber > 40)
            {
                AddLogMessage($"Ongeldige pin nummer: {customPinNumber}");
                return;
            }
            
            if (gpio != null)
            {
                if (!gpio.IsPinOpen(customPinNumber))
                {
                    gpio.OpenPin(customPinNumber, PinMode.Output);
                    AddLogMessage($"Custom pin {customPinNumber} geopend");
                }
                
                customPinActive = !customPinActive;
                gpio.Write(customPinNumber, customPinActive ? PinValue.High : PinValue.Low);
                AddLogMessage($"Custom pin {customPinNumber} geschakeld naar: {(customPinActive ? "AAN" : "UIT")}");
            }
            else
            {
                AddLogMessage("GPIO controller is niet geïnitialiseerd");
            }
        }
        catch (Exception ex)
        {
            AddLogMessage($"Fout bij schakelen custom pin {customPinNumber}: {ex.Message}");
        }
    }

    private void AddLogMessage(string message)
    {
        logMessages.Insert(0, (DateTime.Now, message));
        if (logMessages.Count > 100)
        {
            logMessages.RemoveAt(logMessages.Count - 1);
        }
        StateHasChanged();
    }

    private void ClearLog()
    {
        logMessages.Clear();
        StateHasChanged();
    }

    public void Dispose()
    {
        // Stop LED knipperen als het actief is
        ledBlinkTimer?.Dispose();
        
        // Zet alle pins op LOW
        if (gpio != null)
        {
            foreach (var pin in compartmentPins.Values)
            {
                if (gpio.IsPinOpen(pin))
                {
                    try
                    {
                        gpio.Write(pin, PinValue.Low);
                    }
                    catch
                    {
                        // Negeer fouten bij afsluiten
                    }
                }
            }
            
            if (gpio.IsPinOpen(LED_PIN))
            {
                try
                {
                    gpio.Write(LED_PIN, PinValue.Low);
                }
                catch
                {
                    // Negeer fouten bij afsluiten
                }
            }
        }
    }
}