@page "/Test"
@rendermode InteractiveServer
@using System
@using System.Device.Gpio
@using System.Threading.Tasks
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="container">
    
    <div class="header mb-4">
        <h1 class="text-center p-3 bg-primary text-white rounded">GPIO Tester</h1>
    </div>

    <div class="d-flex justify-content-center mt-4 mb-2">
        <span class="badge @(isSimulated ? "bg-warning text-dark" : "bg-success") fs-5 px-4 py-2">
            State: @(isSimulated ? "Simulated" : "GPIO")
        </span>
    </div>

    <div class="card mb-4">
        <div class="card-header bg-primary text-white">
            <h3 class="mb-0">GPIO Pin Controle</h3>
        </div>
        <div class="card-body">
            <div class="mb-4">
                <h4>LED toggle test</h4>
                <div class="d-flex mt-2">
                    <button class="btn @(ledState ? "btn-danger" : "btn-success") me-2" @onclick="ToggleLed">
                        Toggle
                    </button>
                    <div class="status-indicator @(ledState ? "bg-success" : "bg-secondary")"></div>
                    <span class="ms-2">Status: @(ledState ? "AAN" : "UIT")</span>
                </div>
            </div>

            <div class="mb-4">
                <h4>LED kinpper test</h4>
                <div class="d-flex mt-2">
                    <button class="btn @(ledBlinkActive ? "btn-danger" : "btn-success") me-2" @onclick="ToggleLedBlink">
                        @(ledBlinkActive ? "Stop Knipperen" : "Start Knipperen")
                    </button>
                    <div class="status-indicator @(ledState ? "bg-warning" : "bg-secondary")"></div>
                    <span class="ms-2">Status: @(ledBlinkActive ? "KNIPPEREND" : "UIT")</span>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-header bg-primary text-white">
            <h3 class="mb-0">Log</h3>
        </div>
        <div class="card-body">
            <div class="log-container">
                @foreach (var log in logMessages)
                {
                    <div class="log-entry">
                        <span class="log-time">@log.Time.ToString("HH:mm:ss.fff")</span>
                        <span class="log-message">@log.Message</span>
                    </div>
                }
            </div>
            <button class="btn btn-secondary mt-3" @onclick="ClearLog">Wis Log</button>
        </div>
    </div>
</div>

@code {
    private bool ledBlinkActive = false;
    private bool isSimulated => LEDService.simulate;
    private bool ledState => LEDService.ledState;

    // Logging
    private List<(DateTime Time, string Message)> logMessages = new List<(DateTime, string)>();

    // Timer voor LED knipperen
    private System.Threading.Timer? ledBlinkTimer;

    private void ToggleLed()
    {
        if (ledState)
        {
            // Zet LED uit
            LEDService.TurnOff();
            AddLogMessage($"LED uitgeschakeld");
        }
        else
        {
            // Zet LED aan
            LEDService.TurnOn();
            AddLogMessage($"LED ingeschakeld");
        }
    }

    private void ToggleLedBlink()
    {
        try
        {
            ledBlinkActive = !ledBlinkActive;

            if (ledBlinkActive)
            {
                // Start LED knipperen
                ledBlinkTimer = new System.Threading.Timer(LedBlinkCallback, null, 0, 500);
                AddLogMessage($"LED knipperen gestart");
            }
            else
            {
                // Stop LED knipperen
                ledBlinkTimer?.Dispose();
                ledBlinkTimer = null;

                LEDService.TurnOff(); // Zet LED uit bij stoppen

                AddLogMessage($"LED knipperen gestopt");
            }
        }
        catch (Exception ex)
        {
            AddLogMessage($"Fout bij LED knipperen: {ex.Message}");
        }
    }

    private void LedBlinkCallback(object? state)
    {
        InvokeAsync(() =>
        {
            if (ledState)
            {
                LEDService.TurnOff();
                AddLogMessage($"LED uitgeschakeld (knipperen)");
            }
            else
            {
                LEDService.TurnOn();
                AddLogMessage($"LED ingeschakeld (knipperen)");
            }
        });
    }

    private void AddLogMessage(string message)
    {
        logMessages.Insert(0, (DateTime.Now, message));
        if (logMessages.Count > 100)
        {
            logMessages.RemoveAt(logMessages.Count - 1);
        }
        StateHasChanged();
    }

    private void ClearLog()
    {
        logMessages.Clear();
        StateHasChanged();
    }

    public void Dispose()
    {
        // Stop LED knipperen als het actief is
        ledBlinkTimer?.Dispose();

        // Zet alle pins op LOW
        LEDService.TurnOff();

        // Log afsluiting
        AddLogMessage("GPIO Tester afgesloten");
    }
}