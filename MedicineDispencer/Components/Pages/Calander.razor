@page "/Calendar"
@using MudBlazor
@using MudBlazor.Services
 
<MudThemeProvider />          
<MudDialogProvider />        
<MudSnackbarProvider />      
<MudPopoverProvider /> 
<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5" Class="mb-4">ðŸ“… Weekoverzicht Medicatie</MudText>
 
    <div class="calendar-grid">
    @foreach (var day in Enumerable.Range(0, 7).Select(i => CurrentDate.AddDays(i)))
    {
        <div class="calendar-day">
            <MudPaper Class="pa-2" Style="background-color: #f1f1f1;">
                <MudText Typo="Typo.subtitle2" Align="Align.Center">@day.ToString("ddd dd")</MudText>
 
                @foreach (var hour in Enumerable.Range(0, 24))
                {
                    var currentHour = new DateTime(day.Year, day.Month, day.Day, hour, 0, 0);
                    var dosesThisHour = GroupedDoses.TryGetValue(day.Date, out var allDoses)
                        ? allDoses.Where(d => d.Time.Hour == hour).ToList()
                        : new List<MedicationDose>();
 
                    <MudPaper Class="pa-1 mt-1" Style="border-left: 4px solid #90caf9; background-color: #ffffff;">
                        <MudText Typo="Typo.caption" Class="text-secondary">@currentHour.ToString("HH:mm")</MudText>
 
                        @if (dosesThisHour.Any())
                        {
                            @foreach (var dose in dosesThisHour)
                            {
                                var borderColor = GetColorByName(dose.Name).ToDescriptionString();
 
                                <MudPaper Class="pa-1 mt-1 mb-1" Elevation="1" Style=@($"border-left: 4px solid {borderColor};")>
                                    <MudStack Row JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
                                        <MudText Typo="Typo.caption">ðŸ’Š @dose.Name</MudText>
                                        <MudChip T="string"
                                                 Size="Size.Small"
                                                 Color="@GetColorByName(dose.Name)"
                                                 Variant="Variant.Filled">
                                            Vak @dose.Compartment
                                        </MudChip>
                                    </MudStack>
                                </MudPaper>
                            }
                        }
                        else
                        {
                            <MudText Typo="Typo.overline" Class="text-disabled">â€“</MudText>
                        }
                    </MudPaper>
                }
            </MudPaper>
        </div>
    }
</div>
</MudPaper>
 
@code {
    private DateTime CurrentDate = DateTime.Today;
    private Dictionary<DateTime, List<MedicationDose>> GroupedDoses = new();
 
    protected override void OnInitialized()
    {
        var start = CurrentDate;
        var end = CurrentDate.AddDays(6); // Volledige week
        var doses = BuildSchedule(start, end);
        GroupedDoses = doses
            .GroupBy(d => d.Time.Date)
            .ToDictionary(g => g.Key, g => g.OrderBy(d => d.Time).ToList());
    }
 
    private List<MedicationDose> BuildSchedule(DateTime start, DateTime end)
    {
        var list = new List<MedicationDose>();
 
        for (int i = 0; i < compartments.Length; i++)
        {
            var slot = compartments[i];
            if (slot is null) continue;
 
            foreach (var t in slot.DoseringstijdenPerDag)
            {
                for (var day = start; day <= end; day = day.AddDays(1))
                {
                    list.Add(new MedicationDose
                    {
                        Name = slot.MedicijnNaam,
                        Time = day.Date + t,
                        Compartment = i + 1,
                        Taken = LoadTakenStatus(slot.MedicijnNaam, day.Date + t)
                    });
                }
            }
        }
 
        return list;
    }
 
    private void MarkAsTaken(MedicationDose dose)
    {
        dose.Taken = true;
        SaveTakenStatus(dose);
        StateHasChanged();
    }
 
    private void SaveTakenStatus(MedicationDose dose)
    {
        var key = $"taken_{dose.Name}_{dose.Time:yyyyMMddHHmm}";
        localStorage[key] = "true";
    }
 
    private bool LoadTakenStatus(string name, DateTime time)
    {
        var key = $"taken_{name}_{time:yyyyMMddHHmm}";
        return localStorage.TryGetValue(key, out var value) && value == "true";
    }
 
    private Color GetColorByName(string name)
    {
        return name.ToLower() switch
        {
            var s when s.Contains("paracetamol") => Color.Warning,
            var s when s.Contains("ibuprofen") => Color.Error,
            var s when s.Contains("vitamine") => Color.Info,
            _ => Color.Primary
        };
    }
 
    public class MedicationDose
    {
        public string Name { get; set; } = string.Empty;
        public DateTime Time { get; set; }
        public int Compartment { get; set; }
        public bool Taken { get; set; } = false;
    }
 
    private MedicijnCompartiment?[] compartments => CompartmentsData.compartments;
    private Dictionary<string, string> localStorage = new();
}