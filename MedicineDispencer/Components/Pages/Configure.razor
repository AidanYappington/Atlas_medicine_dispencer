@page "/Configure/{CompartmentIndex:int?}"
@rendermode InteractiveServer

@using System
@using System.Collections.Generic
@inject IJSRuntime JSRuntime

<div class="container">
    <div class="card mb-4">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h3 class="mb-0">Compartiment Configuratie</h3>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <label for="compartment-select" class="form-label">Compartiment:</label>
                <select id="compartment-select" class="form-select" @bind="selectedCompartmentIndex">
                    @for (int i = 0; i < compartiments.Length; i++)
                    {
                        <option value="@i">
                            @if (compartiments[i] == null)
                            {
                                @($"Compartiment {i + 1}")
                            }
                            else
                            {
                                @($"Compartiment {i + 1} - {compartiments[i].MedicijnNaam} ({compartiments[i].Voorraad})")
                            }
                        </option>
                    }
                </select>
            </div>

            <div @key="selectedCompartmentIndex">
                <div class="mb-3">
                    <label for="medication-name" class="form-label">Medicijn naam:</label>
                    <input id="medication-name" type="text" class="form-control" @bind="configMedicationName" />
                </div>
                <div class="mb-3">
                    <label for="medication-dosage" class="form-label">Dosering:</label>
                    <input id="medication-dosage" type="text" class="form-control" @bind="configMedicationDosage" />
                </div>
            </div>

            <div class="mb-3">
                <label class="form-label">Doseringstijden:</label>

                @foreach (var time in configDosingTimes)
                {
                    var index = configDosingTimes.IndexOf(time);
                    <div class="input-group mb-2">
                        <input type="time" class="form-control" value="@time.ToString(@"hh\:mm")"
                            @onchange="@(e => UpdateDosingTime(index, e.Value?.ToString()))" />
                        <button class="btn btn-outline-danger" @onclick="() => RemoveDosingTime(index)">
                            Verwijder
                        </button>
                    </div>
                }

                <button class="btn btn-outline-primary" @onclick="AddDosingTime">
                    Tijdstip toevoegen
                </button>
            </div>

            <div class="mb-3">
                <label for="medication-stock" class="form-label">Voorraad:</label>
                <input id="medication-stock" type="number" class="form-control" @bind="configMedicationStock" min="0" />
            </div>

            <button class="btn btn-primary" @onclick="SaveCompartmentConfig">Opslaan</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? CompartmentIndex { get; set; }

    private MedicijnCompartiment?[] compartiments => CompartmentsData.compartments;

    private int _selectedCompartmentIndex = 0;
    private int selectedCompartmentIndex
    {
        get => _selectedCompartmentIndex;
        set
        {
            if (_selectedCompartmentIndex != value)
            {
                _selectedCompartmentIndex = value;
                OnSwitchCompartment();
            }
        }
    }

    private string configMedicationName = "";
    private string configMedicationDosage = "";
    private List<TimeSpan> configDosingTimes = new List<TimeSpan>();
    private int configMedicationStock = 0;

    protected override void OnInitialized()
    {
        if (CompartmentIndex.HasValue)
        {
            // Clamp the value to valid bounds
            var idx = CompartmentIndex.Value - 1;
            if (idx >= 0 && idx < compartiments.Length)
            {
                selectedCompartmentIndex = idx;
            }
            else
            {
                selectedCompartmentIndex = 0; // fallback to first compartment
            }
        }
        OnSwitchCompartment();
    }

    private void OnSwitchCompartment()
    {
        configDosingTimes = compartiments[selectedCompartmentIndex]?.DoseringstijdenPerDag?.ToList()
        ?? new List<TimeSpan> { new TimeSpan(8, 0, 0) };
        configMedicationName = compartiments[selectedCompartmentIndex]?.MedicijnNaam ?? "";
        configMedicationDosage = compartiments[selectedCompartmentIndex]?.Dosis ?? "";
        configMedicationStock = compartiments[selectedCompartmentIndex]?.Voorraad ?? 0;
    }

    private void AddDosingTime()
    {
        configDosingTimes.Add(new TimeSpan(8, 0, 0)); // Default: 8:00
    }

    private void UpdateDosingTime(int index, string? timeString)
    {
        if (timeString != null && index >= 0 && index < configDosingTimes.Count)
        {
            string[] parts = timeString.Split(':');
            if (parts.Length >= 2 && int.TryParse(parts[0], out int hours) && int.TryParse(parts[1], out int minutes))
            {
                configDosingTimes[index] = new TimeSpan(hours, minutes, 0);
            }
        }
    }

    private void RemoveDosingTime(int index)
    {
        if (index >= 0 && index < configDosingTimes.Count)
        {
            configDosingTimes.RemoveAt(index);
        }
    }

    private void SaveCompartmentConfig()
    {
        if (string.IsNullOrWhiteSpace(configMedicationName) ||
        string.IsNullOrWhiteSpace(configMedicationDosage))
        {
            // Show error message
            return;
        }

        // Save configuration logic
        compartiments[selectedCompartmentIndex] = new MedicijnCompartiment(configMedicationName, configMedicationDosage,
        configMedicationStock, configDosingTimes);
    }
}