@rendermode InteractiveServer

@inject NotificationService NotificationService
@inject LogService LogService

@implements IDisposable



@if (show)
{
    <div class="modal show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h3 class="mb-0">MEDICIJN HERINNERING</h3>
                </div>
                <div class="modal-body text-center">
                    <h2 class="mb-3">Het is tijd om uw medicijn te nemen:</h2>
                    @foreach (var group in GroupedDueCompartments)
                    {
                        <div class="medication-info my-4 border-bottom pb-3 mb-3">
                            <h3 class="text-primary">@group.Compartment.MedicijnNaam</h3>
                            <p class="lead">@group.Compartment.Dosis</p>
                            <p class="mb-4">Compartiment @group.CompartmentIndex</p>
                            <span class="badge bg-info">Aantal: @group.Amount</span>
                            <div class="alert alert-success">
                                <p>Het compartiment is nu open.</p>
                            </div>
                        </div>
                    }
                    <button class="btn btn-success btn-lg mb-2" @onclick="TakeMedication">
                        Ik heb mijn medicijn genomen
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="DismissReminder">
                        Later Herinneren
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool show => NotificationService.IsNotificationActive;
    private List<(int, MedicijnCompartiment)>? dueCompartments => NotificationService.dueCompartments;
    // Group and count for display and logging
    private IEnumerable<(int CompartmentIndex, MedicijnCompartiment Compartment, int Amount)> GroupedDueCompartments =>
    dueCompartments?
    .GroupBy(dc => dc.Item1)
    .Select(g => (g.Key, g.First().Item2, g.Count()))
    ?? Enumerable.Empty<(int, MedicijnCompartiment, int)>();

    protected override void OnInitialized()
    {
        NotificationService.OnNotification += ShowNotification;
    }

    private void ShowNotification()
    {
        InvokeAsync(StateHasChanged);
    }

    public async Task TakeMedication()
    {
        if (dueCompartments != null)
        {
            foreach (var group in GroupedDueCompartments)
            {
                for (int i = 0; i < group.Amount; i++)
                {
                    var log = new LogEntry
                    {
                        Timestamp = DateTime.Now,
                        MedicationName = group.Compartment.MedicijnNaam,
                        Dose = group.Compartment.Dosis,
                        Compartment = group.CompartmentIndex,
                    };
                    await LogService.AddLogAsync(log);
                }
            }
        }

        NotificationService.ClearReminders();
    }
    public void DismissReminder()
    {
        NotificationService.DismissReminder();
    }

    public void Dispose()
    {
        NotificationService.OnNotification -= ShowNotification;
    }
}